{"ast":null,"code":"import _slicedToArray from\"/Users/admin/Documents/React Learning/Calculator projects/01-starting-project/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from'react';import logo from'./assets/investment-calculator-logo.png';import Header from'./Components/Header/header';import Form from'./Components/Form/form';import Result from'./Components/Result/result';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var yearlyData=[];var _React$useState=React.useState([]),_React$useState2=_slicedToArray(_React$useState,2),yearlyDataResult=_React$useState2[0],setyearlyDataResult=_React$useState2[1];var calculateHandler=function calculateHandler(userInput){// Should be triggered when form is submitted\n// You might not directly want to bind it to the submit event on the form though...\nconsole.log(userInput);var currentSavings=+userInput['currentsavings'];// feel free to change the shape of this input object!\nvar yearlyContribution=+userInput['yearlysavings'];// as mentioned: feel free to change the shape...\nvar expectedReturn=+userInput['expectedinterest']/100;var duration=+userInput['investmentduration'];// The below code calculates yearly results (total savings, interest etc)\nfor(var i=0;i<duration;i++){var yearlyInterest=currentSavings*expectedReturn;currentSavings+=yearlyInterest+yearlyContribution;yearlyData.push({// feel free to change the shape of the data pushed to the array!\nyear:i+1,yearlyInterest:yearlyInterest,savingsEndOfYear:currentSavings,yearlyContribution:yearlyContribution});}setyearlyDataResult(yearlyData);// do something with yearlyData ...\n};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Header,{src:logo}),/*#__PURE__*/_jsx(Form,{onsubmitForm:calculateHandler}),/*#__PURE__*/_jsx(Result,{getresult:yearlyDataResult})]});}export default App;","map":{"version":3,"names":["React","logo","Header","Form","Result","jsx","_jsx","jsxs","_jsxs","App","yearlyData","_React$useState","useState","_React$useState2","_slicedToArray","yearlyDataResult","setyearlyDataResult","calculateHandler","userInput","console","log","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","src","onsubmitForm","getresult"],"sources":["/Users/admin/Documents/React Learning/Calculator projects/01-starting-project/src/App.js"],"sourcesContent":["import React from 'react';\nimport logo from './assets/investment-calculator-logo.png';\nimport Header from './Components/Header/header'\nimport Form from './Components/Form/form'\nimport Result from './Components/Result/result';\n\n\nfunction App() {\n\n  var yearlyData=[];\n\n  const [yearlyDataResult,setyearlyDataResult] = React.useState([]);\n \n  const calculateHandler = (userInput) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n    console.log(userInput);\n       \n    let currentSavings = +userInput['currentsavings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearlysavings']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expectedinterest'] / 100;\n    const duration = +userInput['investmentduration'];\n\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n    \n    setyearlyDataResult(yearlyData);\n\n    // do something with yearlyData ...\n  };\n\n\n  return (\n    <div>\n      {/* <header className=\"header\">\n        <img src={logo} alt=\"logo\" />\n        <h1>Investment Calculator</h1>\n      </header> */}\n\n      <Header src={logo}></Header>\n      <Form onsubmitForm={calculateHandler}></Form>\n      <Result getresult={yearlyDataResult}></Result>\n  \n\n      {/* <form className=\"form\">\n        <div className=\"input-group\">\n          <p>\n            <label htmlFor=\"current-savings\">Current Savings ($)</label>\n            <input type=\"number\" id=\"current-savings\" />\n          </p>\n          <p>\n            <label htmlFor=\"yearly-contribution\">Yearly Savings ($)</label>\n            <input type=\"number\" id=\"yearly-contribution\" />\n          </p>\n        </div>\n        <div className=\"input-group\">\n          <p>\n            <label htmlFor=\"expected-return\">\n              Expected Interest (%, per year)\n            </label>\n            <input type=\"number\" id=\"expected-return\" />\n          </p>\n          <p>\n            <label htmlFor=\"duration\">Investment Duration (years)</label>\n            <input type=\"number\" id=\"duration\" />\n          </p>\n        </div> */}\n        {/* <p className=\"actions\">\n          <button type=\"reset\" className=\"buttonAlt\">\n            Reset\n          </button>\n          <button type=\"submit\" className=\"button\">\n            Calculate\n          </button>\n        </p> */}\n      {/* </form> */}\n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n\n      {/* <table className=\"result\">\n        <thead>\n          <tr>\n            <th>Year</th>\n            <th>Total Savings</th>\n            <th>Interest (Year)</th>\n            <th>Total Interest</th>\n            <th>Invested Capital</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>YEAR NUMBER</td>\n            <td>TOTAL SAVINGS END OF YEAR</td>\n            <td>INTEREST GAINED IN YEAR</td>\n            <td>TOTAL INTEREST GAINED</td>\n            <td>TOTAL INVESTED CAPITAL</td>\n          </tr>\n        </tbody>\n      </table> */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"mKAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,IAAI,KAAM,yCAAyC,CAC1D,MAAO,CAAAC,MAAM,KAAM,4BAA4B,CAC/C,MAAO,CAAAC,IAAI,KAAM,wBAAwB,CACzC,MAAO,CAAAC,MAAM,KAAM,4BAA4B,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAGhD,QAAS,CAAAC,GAAGA,CAAA,CAAG,CAEb,GAAI,CAAAC,UAAU,CAAC,EAAE,CAEjB,IAAAC,eAAA,CAA+CX,KAAK,CAACY,QAAQ,CAAC,EAAE,CAAC,CAAAC,gBAAA,CAAAC,cAAA,CAAAH,eAAA,IAA1DI,gBAAgB,CAAAF,gBAAA,IAACG,mBAAmB,CAAAH,gBAAA,IAE3C,GAAM,CAAAI,gBAAgB,CAAG,QAAnB,CAAAA,gBAAgBA,CAAIC,SAAS,CAAK,CACtC;AACA;AACAC,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC,CAEtB,GAAI,CAAAG,cAAc,CAAG,CAACH,SAAS,CAAC,gBAAgB,CAAC,CAAE;AACnD,GAAM,CAAAI,kBAAkB,CAAG,CAACJ,SAAS,CAAC,eAAe,CAAC,CAAE;AACxD,GAAM,CAAAK,cAAc,CAAG,CAACL,SAAS,CAAC,kBAAkB,CAAC,CAAG,GAAG,CAC3D,GAAM,CAAAM,QAAQ,CAAG,CAACN,SAAS,CAAC,oBAAoB,CAAC,CAGjD;AACA,IAAK,GAAI,CAAAO,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGD,QAAQ,CAAEC,CAAC,EAAE,CAAE,CACjC,GAAM,CAAAC,cAAc,CAAGL,cAAc,CAAGE,cAAc,CACtDF,cAAc,EAAIK,cAAc,CAAGJ,kBAAkB,CACrDZ,UAAU,CAACiB,IAAI,CAAC,CACd;AACAC,IAAI,CAAEH,CAAC,CAAG,CAAC,CACXC,cAAc,CAAEA,cAAc,CAC9BG,gBAAgB,CAAER,cAAc,CAChCC,kBAAkB,CAAEA,kBACtB,CAAC,CAAC,CACJ,CAEAN,mBAAmB,CAACN,UAAU,CAAC,CAE/B;AACF,CAAC,CAGD,mBACEF,KAAA,QAAAsB,QAAA,eAMExB,IAAA,CAACJ,MAAM,EAAC6B,GAAG,CAAE9B,IAAK,CAAS,CAAC,cAC5BK,IAAA,CAACH,IAAI,EAAC6B,YAAY,CAAEf,gBAAiB,CAAO,CAAC,cAC7CX,IAAA,CAACF,MAAM,EAAC6B,SAAS,CAAElB,gBAAiB,CAAS,CAAC,EA2D3C,CAAC,CAEV,CAEA,cAAe,CAAAN,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}