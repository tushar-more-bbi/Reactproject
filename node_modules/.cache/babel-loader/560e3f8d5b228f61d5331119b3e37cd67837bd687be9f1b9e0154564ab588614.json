{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/React Learning/Calculator projects/01-starting-project/src/App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport logo from './assets/investment-calculator-logo.png';\nimport Header from './Components/Header/header';\nimport Form from './Components/Form/form';\nimport Result from './Components/Result/result';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  var yearlyData = [];\n  const [yearlyDataResult, setyearlyDataResult] = React.useState([]);\n  const [resultFlag, setResultFlag] = React.useState(true);\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n    console.log(userInput);\n    let currentSavings = +userInput['currentsavings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearlysavings']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expectedinterest'] / 100;\n    const duration = +userInput['investmentduration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    setyearlyDataResult(yearlyData);\n    setResultFlag(true);\n\n    // do something with yearlyData ...\n  };\n\n  const resetFlagHandler = value => {\n    setResultFlag(value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      src: logo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onsubmitForm: calculateHandler,\n      reset: resetFlagHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Result, {\n      getresult: yearlyDataResult,\n      clearResult: resultFlag\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"NRZqHS8jQH/afHshrTlvx7p9RZo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","logo","Header","Form","Result","jsxDEV","_jsxDEV","App","_s","yearlyData","yearlyDataResult","setyearlyDataResult","useState","resultFlag","setResultFlag","calculateHandler","userInput","console","log","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","resetFlagHandler","value","children","src","fileName","_jsxFileName","lineNumber","columnNumber","onsubmitForm","reset","getresult","clearResult","_c","$RefreshReg$"],"sources":["/Users/admin/Documents/React Learning/Calculator projects/01-starting-project/src/App.js"],"sourcesContent":["import React from 'react';\nimport logo from './assets/investment-calculator-logo.png';\nimport Header from './Components/Header/header'\nimport Form from './Components/Form/form'\nimport Result from './Components/Result/result';\n\n\nfunction App() {\n\n  var yearlyData=[];\n\n  \n\n  const [yearlyDataResult,setyearlyDataResult] = React.useState([]);\n  const [resultFlag,setResultFlag] = React.useState(true);\n\n  const calculateHandler = (userInput) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n    console.log(userInput);\n   \n       \n    let currentSavings = +userInput['currentsavings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearlysavings']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expectedinterest'] / 100;\n    const duration = +userInput['investmentduration'];\n\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n    \n    setyearlyDataResult(yearlyData);\n    setResultFlag(true);\n\n    // do something with yearlyData ...\n  };\n\n \n  const resetFlagHandler = (value) => {\n    setResultFlag(value);\n  }\n\n\n\n\n\n\n\n\n  return (\n    <div>\n      {/* <header className=\"header\">\n        <img src={logo} alt=\"logo\" />\n        <h1>Investment Calculator</h1>\n      </header> */}\n\n      <Header src={logo}></Header>\n      <Form onsubmitForm={calculateHandler} reset={resetFlagHandler}></Form>\n      <Result getresult={yearlyDataResult} clearResult={resultFlag}></Result>\n  \n\n      {/* <form className=\"form\">\n        <div className=\"input-group\">\n          <p>\n            <label htmlFor=\"current-savings\">Current Savings ($)</label>\n            <input type=\"number\" id=\"current-savings\" />\n          </p>\n          <p>\n            <label htmlFor=\"yearly-contribution\">Yearly Savings ($)</label>\n            <input type=\"number\" id=\"yearly-contribution\" />\n          </p>\n        </div>\n        <div className=\"input-group\">\n          <p>\n            <label htmlFor=\"expected-return\">\n              Expected Interest (%, per year)\n            </label>\n            <input type=\"number\" id=\"expected-return\" />\n          </p>\n          <p>\n            <label htmlFor=\"duration\">Investment Duration (years)</label>\n            <input type=\"number\" id=\"duration\" />\n          </p>\n        </div> */}\n        {/* <p className=\"actions\">\n          <button type=\"reset\" className=\"buttonAlt\">\n            Reset\n          </button>\n          <button type=\"submit\" className=\"button\">\n            Calculate\n          </button>\n        </p> */}\n      {/* </form> */}\n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n\n      {/* <table className=\"result\">\n        <thead>\n          <tr>\n            <th>Year</th>\n            <th>Total Savings</th>\n            <th>Interest (Year)</th>\n            <th>Total Interest</th>\n            <th>Invested Capital</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>YEAR NUMBER</td>\n            <td>TOTAL SAVINGS END OF YEAR</td>\n            <td>INTEREST GAINED IN YEAR</td>\n            <td>TOTAL INTEREST GAINED</td>\n            <td>TOTAL INVESTED CAPITAL</td>\n          </tr>\n        </tbody>\n      </table> */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,yCAAyC;AAC1D,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,MAAM,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGhD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,IAAIC,UAAU,GAAC,EAAE;EAIjB,MAAM,CAACC,gBAAgB,EAACC,mBAAmB,CAAC,GAAGX,KAAK,CAACY,QAAQ,CAAC,EAAE,CAAC;EACjE,MAAM,CAACC,UAAU,EAACC,aAAa,CAAC,GAAGd,KAAK,CAACY,QAAQ,CAAC,IAAI,CAAC;EAEvD,MAAMG,gBAAgB,GAAIC,SAAS,IAAK;IACtC;IACA;IACAC,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;IAGtB,IAAIG,cAAc,GAAG,CAACH,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC;IACnD,MAAMI,kBAAkB,GAAG,CAACJ,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC;IACxD,MAAMK,cAAc,GAAG,CAACL,SAAS,CAAC,kBAAkB,CAAC,GAAG,GAAG;IAC3D,MAAMM,QAAQ,GAAG,CAACN,SAAS,CAAC,oBAAoB,CAAC;;IAGjD;IACA,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDX,UAAU,CAACgB,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;IAEAT,mBAAmB,CAACF,UAAU,CAAC;IAC/BK,aAAa,CAAC,IAAI,CAAC;;IAEnB;EACF,CAAC;;EAGD,MAAMc,gBAAgB,GAAIC,KAAK,IAAK;IAClCf,aAAa,CAACe,KAAK,CAAC;EACtB,CAAC;EASD,oBACEvB,OAAA;IAAAwB,QAAA,gBAMExB,OAAA,CAACJ,MAAM;MAAC6B,GAAG,EAAE9B;IAAK;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eAC5B7B,OAAA,CAACH,IAAI;MAACiC,YAAY,EAAErB,gBAAiB;MAACsB,KAAK,EAAET;IAAiB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACtE7B,OAAA,CAACF,MAAM;MAACkC,SAAS,EAAE5B,gBAAiB;MAAC6B,WAAW,EAAE1B;IAAW;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OA2DpE,CAAC;AAEV;AAAC3B,EAAA,CA1HQD,GAAG;AAAAiC,EAAA,GAAHjC,GAAG;AA4HZ,eAAeA,GAAG;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}